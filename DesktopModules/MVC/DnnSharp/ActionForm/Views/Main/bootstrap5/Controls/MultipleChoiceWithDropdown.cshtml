@inherits avt.ActionForm.Core.ViewModels.FormFieldWebViewPage<MultipleChoiceWithDropdownFieldVM>
@using avt.ActionForm
@using avt.ActionForm.Core.ViewModels.Main

@{

    // from XSL condition: "and not(Other)"
    // TODO: is ng-cloak needed here?
    AddCommonAttributes(true, true, false, "form-control ng-cloak", touchEvent: "click", withCustomValidation: string.IsNullOrWhiteSpace(Model.Other));
    if (Model.Settings.ClientSideValidation && Model.IsRequired && !Model.HasValidationCondition)
    {
        AppendClasses("required");
    }

    if (!Model.IsConditionallyEnabled)
    {
        Attributes["disabled"] = "disabled";
    }

    var ngChange = "form.fields." + Model.Name + ".value = form.fields." + Model.Name + ".selected.value || ''; " +
    "form.fields." + Model.Name + ".ddValue = form.fields." + Model.Name + ".selected.value; ";

    if (!string.IsNullOrWhiteSpace(Model.BindOnChange))
    {
        ngChange += "form.fields." + Model.Name + ".onChange(form);";
    }
    Attributes["ng-change"] = ngChange;

    if (!string.IsNullOrWhiteSpace(Model.BindValueCompiled))
    {
        Attributes["af-bindvalue"] = Model.BindValueCompiled;
        Attributes["af-bindfrom"] = "form.fields." + Model.Name + ".options";
    }

    var otherInputAttr = NewAttributes();
    AppendClasses(otherInputAttr, "form-control");
    AppendClasses(otherInputAttr, Model.CssClass);
    if (!string.IsNullOrWhiteSpace(Model.ValidationGroup))
    {
        AppendClasses(otherInputAttr, Model.ValidationGroup);
        if (!string.IsNullOrWhiteSpace(Model.GroupValidator))
        {
            AppendClasses(otherInputAttr, Model.ValidationGroup + "-" + Model.GroupValidatorJsName);
        }
    }
    if (Model.Settings.ClientSideValidation && !Model.HasValidationCondition)
    {
        AppendClasses(otherInputAttr, Model.CustomValidator1JsName);
        AppendClasses(otherInputAttr, Model.CustomValidator2JsName);
    }

    if (!Model.IsConditionallyEnabled)
    {
        otherInputAttr["disabled"] = "disabled";
    }
}

<div class="dropdown-loader"
     ng-show="form.fields.@(Model.Name).$_loading"
     ng-disabled="form.fields.@(Model.Name).value == form.fields.@(Model.Name).$_loading">
    Loading...
</div>

<!-- googleoff: all -->
<select class="form-select"
        ng-model="form.fields.@(Model.Name).selected"
        ng-options="o as o.text for o in form.fields.@(Model.Name).options"
        data-val="{{form.fields.@(Model.Name).selected.path}}"
        @ElementAttributes()>

    <option value="">
        @if (Model.Settings.LabelAlign == eLabelAlign.Inside)
        {
            @Model.TitleTokenized
        }
        else
        {
            @Model.Empty
        }
    </option>
</select>

@if (Model.Settings.FloatingLabels) {
    <label for="@Model.ElementId">@Model.TitleTokenized</label>
}


<!-- googleon: all -->
@if (!string.IsNullOrWhiteSpace(Model.Other))
{
    <label style="padding-left: 10px;" ng-show="form.fields.@(Model.Name).ddValue == '@(Model.Other)'">
        <span>
            @(Model.Other)
        </span>
        &nbsp;
        <input type="text"
           style="margin-top: 2px; display: inline; width: auto;"
           class="form-control"
           name="@(Model.ElementId)-$other"
           id="@(Model.ElementId)-$other"
           ng-model="form.fields.@(Model.Name).otherValue"
           ng-change="form.fields.@(Model.Name).value = form.fields.@(Model.Name).otherValue;"
           @ElementAttributes(otherInputAttr) />
    </label>
}
