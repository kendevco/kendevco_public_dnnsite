{"version":3,"names":["ColorInfo","constructor","this","_hue","_saturation","_lightness","hue","value","saturation","lightness","red","getRGB","setHSL","green","blue","hex","r","getHex","g","b","parseInt","substr","contrastColor","brightness","chroma","Math","abs","quadrant","offset","bias","round","min","max","diff","h","s","l","toString","length","dnnColorPickerCss","__decorate","decorators","target","key","desc","c","arguments","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","DnnColorPicker","hostRef","color","colorBoxHeight","rgbDisplay","hslDisplay","hexDisplay","handleSaturationLightnessMouseDown","e","preventDefault","handleDragLightnessSaturation","window","addEventListener","handleSaturationLightnessMouseUp","rect","saturationLightnessBox","getBoundingClientRect","x","clientX","left","width","y","clientY","top","height","newColor","currentColor","removeEventListener","handleHueMouseDown","handleDragHue","handleHueMouseUp","hueRange","handleComponentValueChange","channel","isNaN","handleHSLChange","component","handleSaturationLightnessKeyDown","shiftKey","handleHueKeyDown","colorChangedHandler","colorChanged","emit","handeCurrentColorChanged","newValue","componentWillLoad","handleHexChange","componentDidLoad","el","style","setProperty","getDoublet","getContrast","valueString","toUpperCase","match","expanded","switchColorMode","id","render","class","ref","element","backgroundColor","onMouseDown","bind","role","bottom","onKeyDown","boxShadow","display","type","step","onChange","onClick","xmlns","viewBox","fill","Debounce","prototype"],"sources":["../../../../node_modules/@dnncommunity/dnn-elements/dist/collection/utilities/colorInfo.js","../../../../node_modules/@dnncommunity/dnn-elements/dist/collection/components/dnn-color-picker/dnn-color-picker.css?tag=dnn-color-picker&encapsulation=shadow","../../../../node_modules/@dnncommunity/dnn-elements/dist/collection/components/dnn-color-picker/dnn-color-picker.js"],"sourcesContent":["/** Color utility class with hsl and rgb converters\n * based on math at https://en.wikipedia.org/wiki/HSL_and_HSV\n * @copyright Copyright (c) .NET Foundation. All rights reserved.\n * @license MIT\n */\nexport class ColorInfo {\n  constructor() {\n    this._hue = 0;\n    this._saturation = 0;\n    this._lightness = 0;\n  }\n  /** gets the color hue\n   * @returns a number between 0 and 359, could contain decimals\n   */\n  get hue() { return this._hue; }\n  set hue(value) {\n    if (value < 0) {\n      value = 0;\n    }\n    if (value > 359) {\n      value = 359;\n    }\n    this._hue = value;\n  }\n  /** gets the color saturation\n   * @returns a number between 0 and 1, could contain decimals\n  */\n  get saturation() { return this._saturation; }\n  set saturation(value) {\n    if (value < 0) {\n      value = 0;\n    }\n    if (value > 1) {\n      value = 1;\n    }\n    this._saturation = value;\n  }\n  /** gets the color lightness\n   * @returns a number between 0 and 1, could contain decimals\n   */\n  get lightness() { return this._lightness; }\n  set lightness(value) {\n    if (value < 0) {\n      value = 0;\n    }\n    if (value > 1) {\n      value = 1;\n    }\n    this._lightness = value;\n  }\n  /** gets or sets the red component\n   * @returns an integer between 0 and 255\n  */\n  get red() {\n    return this.getRGB().red;\n  }\n  set red(value) {\n    this.setHSL(value, this.green, this.blue);\n  }\n  /** gets or sets the green component\n   * @returns an integer between 0 and 255\n   */\n  get green() {\n    return this.getRGB().green;\n  }\n  set green(value) {\n    this.setHSL(this.red, value, this.blue);\n  }\n  /** gets or sets the blue component\n   * @returns an integer between 0 and 255\n   */\n  get blue() {\n    return this.getRGB().blue;\n  }\n  set blue(value) {\n    this.setHSL(this.red, this.green, value);\n  }\n  /** gets or sets the hex color value, expresses as 6 hexadecimal characters.\n   * @returns hex representation of the color\n   */\n  get hex() {\n    var r = this.getHex(this.red);\n    var g = this.getHex(this.green);\n    var b = this.getHex(this.blue);\n    return r + g + b;\n  }\n  set hex(value) {\n    this.red = parseInt(value.substr(0, 2));\n    this.green = parseInt(value.substr(2, 2));\n    this.blue = parseInt(value.substr(4, 2));\n  }\n  /** gets white or black color that is a good oposite to the current color\n   * @returns - \"000000\" or \"FFFFFF\"\n   */\n  get contrastColor() {\n    const brightness = (this.red * 299 + this.green * 587 + this.blue * 114) / 1000;\n    if (brightness > 127) {\n      return \"000000\";\n    }\n    return \"FFFFFF\";\n  }\n  getRGB() {\n    const chroma = (1 - Math.abs((2 * this._lightness) - 1)) * this.saturation;\n    // find the quandrant of the hue\n    const quadrant = this._hue / 60;\n    // calculate the offset from the quandrant center\n    const offset = chroma * (1 - Math.abs(quadrant % 2 - 1));\n    // Apply the chroma to the primary component and the offset to the 2nd most important component\n    let r = 0, g = 0, b = 0;\n    if (0 <= quadrant && quadrant <= 1) {\n      r = chroma;\n      g = offset; // red to yellow\n    }\n    else if (1 <= quadrant && quadrant <= 2) {\n      g = chroma;\n      r = offset; // yellow to green\n    }\n    else if (2 <= quadrant && quadrant <= 3) {\n      g = chroma;\n      b = offset; // green to cyan\n    }\n    else if (3 <= quadrant && quadrant <= 4) {\n      b = chroma;\n      g = offset; // cyan to blue\n    }\n    else if (4 <= quadrant && quadrant <= 5) {\n      b = chroma;\n      r = offset; // blue to magenta\n    }\n    else if (5 <= quadrant && quadrant <= 6) {\n      r = chroma;\n      b = offset; // magenta to red\n    }\n    // calculate the bias to add to all channels to match the lightness\n    const bias = this._lightness - (chroma / 2);\n    return {\n      red: Math.round((r + bias) * 255),\n      green: Math.round((g + bias) * 255),\n      blue: Math.round((b + bias) * 255)\n    };\n  }\n  setHSL(red, green, blue) {\n    // GENERAL DATA\n    // all math is based on values from 0 to 1\n    const r = red / 255, g = green / 255, b = blue / 255;\n    // we need to max, min and the difference between them to derive hsl\n    const min = Math.min(r, g, b);\n    const max = Math.max(r, g, b);\n    const diff = max - min;\n    let h = 0, s = 0, l = 0;\n    // HUE\n    if (diff === 0) { // neutral\n      h = 0;\n    }\n    else if (max === r) { // red (magenta to yellow range)\n      h = 60 * ((g - b) / diff);\n    }\n    else if (max === g) { // green (yellow to cyan range)\n      h = 60 * (2 + ((b - r) / diff));\n    }\n    else if (max === b) { // blue (cyan to magenta range)\n      h = 60 * (4 + ((r - g) / diff));\n    }\n    if (h < 0) {\n      h = h + 360;\n    } // ensures positive hues only\n    if (h > 359) {\n      h = 359;\n    } // ensures we never return 360 for simplicity since it is the same as 0\n    // LIGHTNESS\n    l = (max + min) / 2;\n    // SATURATION\n    if (max === 0 || min === 1) { // pure black or white have no saturation\n      s = 0;\n    }\n    else {\n      s = (max - l) / (Math.min(l, 1 - l));\n    }\n    this._hue = h;\n    this._saturation = s;\n    this._lightness = l;\n  }\n  getHex(value) {\n    var hex = value.toString(16);\n    if (hex.length < 2) {\n      hex = \"0\" + hex;\n    }\n    return hex;\n  }\n}\n//# sourceMappingURL=colorInfo.js.map\n",".dnn-color-picker {\n  padding: 15px;\n  max-width: 400px;\n}\n.dnn-color-picker .dnn-color-sliders {\n  display: flex;\n  flex-direction: column;\n  min-width: 200px;\n}\n.dnn-color-picker .dnn-color-sliders .dnn-color-s-b {\n  border: 1px solid #ccc;\n  padding-bottom: var(--color-box-height, 50%);\n  position: relative;\n  background-color: red;\n}\n.dnn-color-picker .dnn-color-sliders .dnn-color-s-b:before {\n  content: \"\";\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: 1;\n  background: linear-gradient(to right, white, red);\n  mix-blend-mode: saturation;\n}\n.dnn-color-picker .dnn-color-sliders .dnn-color-s-b:after {\n  content: \"\";\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: 2;\n  background: linear-gradient(to bottom, white, black);\n  mix-blend-mode: luminosity;\n}\n.dnn-color-picker .dnn-color-sliders .dnn-color-s-b button {\n  position: absolute;\n  bottom: calc(50% - 4px);\n  left: calc(50% - 4px);\n  width: 8px;\n  height: 8px;\n  z-index: 3;\n  display: block;\n  background: none;\n  border: none;\n  margin-left: -4px;\n  margin-bottom: -4px;\n  padding: 7px;\n  background-color: #fff;\n  border-radius: 50%;\n}\n.dnn-color-picker .dnn-color-sliders .dnn-color-s-b button:before {\n  content: \"\";\n  position: absolute;\n  top: -1px;\n  left: -1px;\n  border-radius: 50%;\n}\n.dnn-color-picker .dnn-color-sliders .dnn-color-s-b button:after {\n  content: \"\";\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  border-radius: 50%;\n  width: 10px;\n  height: 10px;\n  border: 2px solid #ccc;\n}\n.dnn-color-picker .dnn-color-sliders .dnn-color-bar {\n  display: flex;\n  align-items: center;\n  margin-top: 15px;\n}\n.dnn-color-picker .dnn-color-sliders .dnn-color-bar .dnn-color-result {\n  flex-direction: column;\n  width: 50px;\n  height: 50px;\n  border-radius: 50%;\n  background: red;\n}\n.dnn-color-picker .dnn-color-sliders .dnn-color-bar .dnn-color-hue {\n  flex: auto;\n  margin-left: 10px;\n  height: 16px;\n  border: 1px solid #ccc;\n  position: relative;\n  background: linear-gradient(to right, #f00 0, #ff0 17%, #0f0 33%, #0ff 50%, #00f 67%, #f0f 84%, #f00 100%);\n}\n.dnn-color-picker .dnn-color-sliders .dnn-color-bar .dnn-color-hue button {\n  width: 10px;\n  height: 20px;\n  position: absolute;\n  top: -2px;\n  left: calc(50% - 4px);\n  border: 0;\n  padding: 0;\n  background-color: transparent;\n  padding-left: -8px;\n}\n.dnn-color-picker .dnn-color-sliders .dnn-color-bar .dnn-color-hue button:before {\n  content: \"\";\n  position: absolute;\n  top: -2px;\n  left: 0px;\n  border-radius: 3px;\n  width: 100%;\n  height: 100%;\n  border: 1px solid #ccc;\n  background-color: #fff;\n}\n.dnn-color-picker .dnn-color-fields {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n}\n.dnn-color-picker .dnn-color-fields .dnn-color-mode-switch {\n  display: flex;\n  align-items: flex-end;\n  padding: 0.5em;\n}\n.dnn-color-picker .dnn-color-fields .dnn-color-mode-switch button {\n  background-color: transparent;\n  border: none;\n}\n.dnn-color-picker .dnn-color-fields .dnn-color-mode-switch button svg {\n  width: 3em;\n  height: 3em;\n  pointer-events: none;\n  outline: none;\n}\n.dnn-color-picker .dnn-color-fields .dnn-rgb-color-fields {\n  display: flex;\n  justify-content: space-evenly;\n}\n.dnn-color-picker .dnn-color-fields .dnn-rgb-color-fields .dnn-rgb-color-field {\n  display: flex;\n  flex-direction: column;\n  flex: auto;\n  text-align: center;\n  padding: 0.5em;\n}\n.dnn-color-picker .dnn-color-fields .dnn-rgb-color-fields .dnn-rgb-color-field label {\n  padding-bottom: 0.25em;\n}\n.dnn-color-picker .dnn-color-fields .dnn-rgb-color-fields .dnn-rgb-color-field input {\n  border-radius: var(--dnn-button-radius, 3px);\n  border: 1px solid #ccc;\n  padding: 0.5em;\n  padding-left: 1.3em;\n  text-align: center;\n}\n.dnn-color-picker .dnn-color-fields .dnn-rgb-color-fields .dnn-rgb-color-field input.red {\n  border-color: red;\n}\n.dnn-color-picker .dnn-color-fields .dnn-rgb-color-fields .dnn-rgb-color-field input.green {\n  border-color: green;\n}\n.dnn-color-picker .dnn-color-fields .dnn-rgb-color-fields .dnn-rgb-color-field input.blue {\n  border-color: blue;\n}\n.dnn-color-picker .dnn-color-fields .dnn-hsl-color-fields {\n  display: flex;\n  justify-content: space-evenly;\n}\n.dnn-color-picker .dnn-color-fields .dnn-hsl-color-fields .dnn-hsl-color-field {\n  display: flex;\n  flex-direction: column;\n  flex: auto;\n  text-align: center;\n  padding: 0.5em;\n}\n.dnn-color-picker .dnn-color-fields .dnn-hsl-color-fields .dnn-hsl-color-field label {\n  padding-bottom: 0.25em;\n}\n.dnn-color-picker .dnn-color-fields .dnn-hsl-color-fields .dnn-hsl-color-field input {\n  border-radius: var(--dnn-button-radius, 3px);\n  border: 1px solid #ccc;\n  padding: 0.5em;\n  padding-left: 1.3em;\n  text-align: center;\n}\n.dnn-color-picker .dnn-color-fields .dnn-hex-color-fields {\n  display: flex;\n  justify-content: space-evenly;\n}\n.dnn-color-picker .dnn-color-fields .dnn-hex-color-fields .dnn-hex-color-field {\n  display: flex;\n  flex-direction: column;\n  flex: auto;\n  text-align: center;\n  padding: 0.5em;\n}\n.dnn-color-picker .dnn-color-fields .dnn-hex-color-fields .dnn-hex-color-field label {\n  padding-bottom: 0.25em;\n}\n.dnn-color-picker .dnn-color-fields .dnn-hex-color-fields .dnn-hex-color-field .hex-input {\n  position: relative;\n  border-radius: var(--dnn-button-radius, 3px);\n  border: 1px solid #ccc;\n  padding: 0.323em;\n  text-align: center;\n}\n.dnn-color-picker .dnn-color-fields .dnn-hex-color-fields .dnn-hex-color-field .hex-input input {\n  border: 0;\n  padding: 0;\n  margin: 0;\n  width: 100%;\n  height: 100%;\n  text-align: center;\n}\n.dnn-color-picker .dnn-color-fields .dnn-hex-color-fields .dnn-hex-color-field .hex-input button {\n  position: absolute;\n  height: 100%;\n  top: 0;\n  right: 1em;\n  background-color: transparent;\n  border: 0;\n  padding: 0;\n  margin: 0;\n}\n.dnn-color-picker .dnn-color-fields .dnn-hex-color-fields .dnn-hex-color-field .hex-input button svg {\n  min-width: 1em;\n}","/** Reusable DNN UI component to pick a color\n * @copyright Copyright (c) .NET Foundation. All rights reserved.\n * @license MIT\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n    r = Reflect.decorate(decorators, target, key, desc);\n  else\n    for (var i = decorators.length - 1; i >= 0; i--)\n      if (d = decorators[i])\n        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { h } from \"@stencil/core\";\nimport { ColorInfo } from '../../utilities/colorInfo';\nimport { Debounce } from \"../../utilities/debounce\";\n/** Color Picker for Dnn */\nexport class DnnColorPicker {\n  constructor() {\n    /** Sets the initial color, must be a valid 8 character hexadecimal string without the # sign. */\n    this.color = \"FFFFFF\";\n    /** Sets the width-height ratio of the color picker saturation-lightness box.\n     * @example 100% renders a perfect square\n     */\n    this.colorBoxHeight = \"50%\";\n    this.rgbDisplay = \"flex\";\n    this.hslDisplay = \"none\";\n    this.hexDisplay = \"none\";\n    this.handleSaturationLightnessMouseDown = (e) => {\n      e.preventDefault();\n      this.handleDragLightnessSaturation(e);\n      window.addEventListener('mousemove', this.handleDragLightnessSaturation);\n      window.addEventListener('mouseup', this.handleSaturationLightnessMouseUp);\n    };\n    this.handleDragLightnessSaturation = (e) => {\n      const rect = this.saturationLightnessBox.getBoundingClientRect();\n      let x = e.clientX - rect.left;\n      if (x < 0) {\n        x = 0;\n      }\n      if (x > rect.width) {\n        x = rect.width;\n      }\n      x = x / rect.width;\n      let y = e.clientY - rect.top;\n      if (y < 0) {\n        y = 0;\n      }\n      if (y > rect.height) {\n        y = rect.height;\n      }\n      y = 1 - (y / rect.height);\n      const newColor = new ColorInfo();\n      newColor.hue = this.currentColor.hue;\n      newColor.saturation = x;\n      newColor.lightness = y;\n      this.currentColor = newColor;\n    };\n    this.handleSaturationLightnessMouseUp = () => {\n      window.removeEventListener('mousemove', this.handleDragLightnessSaturation);\n      window.removeEventListener('mouseup', this.handleSaturationLightnessMouseUp);\n    };\n    this.handleHueMouseDown = (e) => {\n      e.preventDefault();\n      this.handleDragHue(e);\n      window.addEventListener('mousemove', this.handleDragHue);\n      window.addEventListener('mouseup', this.handleHueMouseUp);\n    };\n    this.handleHueMouseUp = () => {\n      window.removeEventListener('mousemove', this.handleDragHue);\n      window.removeEventListener('mouseup', this.handleHueMouseUp);\n    };\n    this.handleDragHue = (e) => {\n      const rect = this.hueRange.getBoundingClientRect();\n      let x = e.clientX - rect.left;\n      if (x < 0) {\n        x = 0;\n      }\n      if (x > rect.width) {\n        x = rect.width;\n      }\n      x = x / rect.width * 360;\n      const newColor = new ColorInfo();\n      newColor.hue = x;\n      newColor.saturation = this.currentColor.saturation;\n      newColor.lightness = this.currentColor.lightness;\n      this.currentColor = newColor;\n    };\n    this.handleComponentValueChange = (e, channel) => {\n      let value = parseInt(e.target.value);\n      if (isNaN(value)) {\n        return;\n      }\n      const newColor = new ColorInfo();\n      if (value < 0) {\n        value = 0;\n      }\n      if (value > 255) {\n        value = 255;\n      }\n      let r = this.currentColor.red;\n      let g = this.currentColor.green;\n      let b = this.currentColor.blue;\n      switch (channel) {\n        case 'red':\n          r = value;\n          break;\n        case 'green':\n          g = value;\n          break;\n        case 'blue':\n          b = value;\n          break;\n        default:\n          break;\n      }\n      newColor.green = g;\n      newColor.red = r;\n      newColor.blue = b;\n      this.currentColor = newColor;\n    };\n    this.handleHSLChange = (e, component) => {\n      let value = parseInt(e.target.value);\n      if (isNaN(value)) {\n        return;\n      }\n      const newColor = new ColorInfo();\n      if (value != null) {\n        let h = this.currentColor.hue;\n        let s = this.currentColor.saturation;\n        let l = this.currentColor.lightness;\n        switch (component) {\n          case \"hue\":\n            if (value < 0) {\n              value = 0;\n            }\n            if (value > 359) {\n              value = 0;\n            }\n            h = value;\n            break;\n          case \"saturation\":\n            if (value < 0) {\n              value = 0;\n            }\n            if (value > 100) {\n              value = 100;\n            }\n            s = value / 100;\n            break;\n          case \"lightness\":\n            if (value < 0) {\n              value = 0;\n            }\n            if (value > 100) {\n              value = 100;\n            }\n            l = value / 100;\n            break;\n          default:\n            break;\n        }\n        newColor.hue = h;\n        newColor.saturation = s;\n        newColor.lightness = l;\n        this.currentColor = newColor;\n      }\n    };\n    this.handleSaturationLightnessKeyDown = (e) => {\n      let newColor = new ColorInfo();\n      newColor.hue = this.currentColor.hue;\n      newColor.saturation = this.currentColor.saturation;\n      newColor.lightness = this.currentColor.lightness;\n      let value = 0.01;\n      if (e.shiftKey) {\n        value = 0.1;\n      }\n      switch (e.key) {\n        case \"ArrowUp\":\n          newColor.lightness += value;\n          break;\n        case \"ArrowDown\":\n          newColor.lightness -= value;\n          break;\n        case \"ArrowLeft\":\n          newColor.saturation -= value;\n          break;\n        case \"ArrowRight\":\n          newColor.saturation += value;\n        default:\n          break;\n      }\n      this.currentColor = newColor;\n    };\n    this.handleHueKeyDown = (e) => {\n      let newColor = new ColorInfo();\n      newColor.hue = this.currentColor.hue;\n      newColor.saturation = this.currentColor.saturation;\n      newColor.lightness = this.currentColor.lightness;\n      let value = 1;\n      if (e.shiftKey) {\n        value = 10;\n      }\n      switch (e.key) {\n        case \"ArrowLeft\":\n          newColor.hue -= value;\n          break;\n        case \"ArrowRight\":\n          newColor.hue += value;\n        default:\n          break;\n      }\n      this.currentColor = newColor;\n    };\n  }\n  colorChangedHandler(color) {\n    this.colorChanged.emit(color);\n  }\n  handeCurrentColorChanged(newValue) {\n    this.colorChangedHandler(newValue);\n  }\n  componentWillLoad() {\n    this.handleHexChange(this.color);\n  }\n  componentDidLoad() {\n    this.el.style.setProperty(\"--color-box-height\", this.colorBoxHeight.toString());\n  }\n  getHex() {\n    return this.getDoublet(this.currentColor.red) + this.getDoublet(this.currentColor.green) + this.getDoublet(this.currentColor.blue);\n  }\n  getContrast() {\n    return this.currentColor.contrastColor;\n  }\n  getDoublet(value) {\n    const valueString = value.toString(16).toUpperCase();\n    if (valueString.length === 1) {\n      return '0' + valueString;\n    }\n    return valueString;\n  }\n  handleHexChange(value) {\n    const newColor = new ColorInfo();\n    if (value.match(/^(?:[\\da-f]{3}|[\\da-f]{6})$/i).length > 0) {\n      if (value.length === 3) {\n        let expanded = value[0] + value[0] + value[1] + value[1] + value[2] + value[2];\n        value = expanded;\n      }\n      newColor.red = parseInt(value.substr(0, 2), 16);\n      newColor.green = parseInt(value.substr(2, 2), 16);\n      newColor.blue = parseInt(value.substr(4, 2), 16);\n    }\n    else {\n      newColor.red = this.currentColor.red;\n      newColor.green = this.currentColor.green;\n      newColor.blue = this.currentColor.blue;\n    }\n    this.currentColor = newColor;\n  }\n  switchColorMode(e) {\n    switch (e.target.id) {\n      case \"rgb-switch\":\n        this.rgbDisplay = \"none\";\n        this.hslDisplay = \"none\";\n        this.hexDisplay = \"flex\";\n        break;\n      case \"hex-switch\":\n        this.rgbDisplay = \"none\";\n        this.hslDisplay = \"flex\";\n        this.hexDisplay = \"none\";\n        break;\n      case \"hsl-switch\":\n        this.rgbDisplay = \"flex\";\n        this.hslDisplay = \"none\";\n        this.hexDisplay = \"none\";\n        break;\n      default:\n        this.rgbDisplay = \"flex\";\n        this.hslDisplay = \"none\";\n        this.hexDisplay = \"none\";\n    }\n  }\n  render() {\n    const hue = this.currentColor.hue;\n    const saturation = this.currentColor.saturation;\n    const lightness = this.currentColor.lightness;\n    const red = this.currentColor.red;\n    const green = this.currentColor.green;\n    const blue = this.currentColor.blue;\n    return (h(\"div\", { class: \"dnn-color-picker\" }, h(\"div\", { class: \"dnn-color-sliders\" }, h(\"div\", { class: \"dnn-color-s-b\", ref: (element) => this.saturationLightnessBox = element, style: { backgroundColor: `hsl(${hue},100%,50%)` }, onMouseDown: this.handleSaturationLightnessMouseDown.bind(this) }, h(\"button\", { class: \"dnn-s-b-picker\", \"aria-label\": \"Press up or down to adjust lightness, left or right to adjust saturation, hold shift to move by 10%\", role: \"slider\", \"aria-valuemin\": \"0\", \"aria-valuemax\": \"100\", \"aria-valuetext\": `Saturation: ${Math.round(this.currentColor.saturation * 100)}%, Lightness: ${Math.round(this.currentColor.lightness * 100)}%`, style: {\n        left: Math.round(saturation * 100) + \"%\",\n        bottom: Math.round(lightness * 100) + \"%\"\n      }, onKeyDown: (e) => this.handleSaturationLightnessKeyDown(e) })), h(\"div\", { class: \"dnn-color-bar\" }, h(\"div\", { class: \"dnn-color-result\", style: {\n        backgroundColor: '#' + this.getHex(),\n        boxShadow: \"0 0 2px 1px \" + \"#\" + this.getContrast()\n      } }), h(\"div\", { class: \"dnn-color-hue\", ref: (element) => this.hueRange = element, onMouseDown: this.handleHueMouseDown.bind(this) }, h(\"button\", { class: \"dnn-hue-picker\", \"aria-label\": \"Press left or right to adjust hue, hold shift to move by 10 degrees\", role: \"slider\", \"aria-valuemin\": \"0\", \"aria-valuemax\": \"359\", \"aria-valuenow\": Math.round(hue), style: { left: (hue / 359 * 100).toString() + \"%\" }, onKeyDown: (e) => this.handleHueKeyDown(e) })))), h(\"div\", { class: \"dnn-color-fields\" }, h(\"div\", { class: \"dnn-rgb-color-fields\", style: { display: this.rgbDisplay } }, h(\"div\", { class: \"dnn-rgb-color-field\" }, h(\"label\", null, \"R\"), h(\"input\", { type: \"number\", min: \"0\", max: \"255\", step: \"1\", class: \"red\", value: red, \"aria-label\": \"red value\", onChange: (e) => this.handleComponentValueChange(e, 'red') })), h(\"div\", { class: \"dnn-rgb-color-field\" }, h(\"label\", null, \"G\"), h(\"input\", { type: \"number\", min: \"0\", max: \"255\", class: \"green\", value: green, \"aria-label\": \"green value\", onChange: (e) => this.handleComponentValueChange(e, 'green') })), h(\"div\", { class: \"dnn-rgb-color-field\" }, h(\"label\", null, \"B\"), h(\"input\", { type: \"number\", min: \"0\", max: \"255\", class: \"blue\", value: blue, \"aria-label\": \"blue value\", onChange: (e) => this.handleComponentValueChange(e, 'blue') })), h(\"div\", { class: \"dnn-color-mode-switch\" }, h(\"button\", { id: \"rgb-switch\", onClick: this.switchColorMode.bind(this), \"aria-label\": \"switch to hexadecimal value entry\" }, h(\"svg\", { xmlns: \"http://www.w3.org/2000/svg\", height: \"24px\", viewBox: \"0 0 24 24\", width: \"24px\", fill: \"#000000\" }, h(\"path\", { d: \"M0 0h24v24H0z\", fill: \"none\" }), h(\"path\", { d: \"M7 7h10v3l4-4-4-4v3H5v6h2V7zm10 10H7v-3l-4 4 4 4v-3h12v-6h-2v4z\" }))))), h(\"div\", { class: \"dnn-hsl-color-fields\", style: { display: this.hslDisplay } }, h(\"div\", { class: \"dnn-hsl-color-field\" }, h(\"label\", null, \"H\"), h(\"input\", { type: \"number\", min: \"0\", max: \"359\", step: 1, value: Math.round(hue), \"aria-label\": \"Hue\", onChange: (e) => this.handleHSLChange(e, 'hue') })), h(\"div\", { class: \"dnn-hsl-color-field\" }, h(\"label\", null, \"S\"), h(\"input\", { type: \"number\", min: \"0\", max: \"100\", step: 1, value: Math.round(saturation * 100), \"aria-label\": \"Saturation\", onChange: (e) => this.handleHSLChange(e, 'saturation') })), h(\"div\", { class: \"dnn-hsl-color-field\" }, h(\"label\", null, \"L\"), h(\"input\", { type: \"number\", min: \"0\", max: \"100\", step: 1, value: Math.round(lightness * 100), \"aria-label\": \"Lightness\", onChange: (e) => this.handleHSLChange(e, 'lightness') })), h(\"div\", { class: \"dnn-color-mode-switch\" }, h(\"button\", { id: \"hsl-switch\", onClick: this.switchColorMode.bind(this), \"aria-label\": \"Switch to red, green, blue entry mode\" }, h(\"svg\", { xmlns: \"http://www.w3.org/2000/svg\", height: \"24px\", viewBox: \"0 0 24 24\", width: \"24px\", fill: \"#000000\" }, h(\"path\", { d: \"M0 0h24v24H0z\", fill: \"none\" }), h(\"path\", { d: \"M7 7h10v3l4-4-4-4v3H5v6h2V7zm10 10H7v-3l-4 4 4 4v-3h12v-6h-2v4z\" }))))), h(\"div\", { class: \"dnn-hex-color-fields\", style: { display: this.hexDisplay } }, h(\"div\", { class: \"dnn-hex-color-field\" }, h(\"label\", null, \"HEX\"), h(\"div\", { class: \"hex-input\" }, h(\"input\", { type: \"text\", \"aria-label\": \"Hexadecimal value\", value: this.getHex(), onChange: e => this.handleHexChange(e.target.value) }), h(\"button\", { class: \"copy\", \"aria-label\": \"copy value\" }, h(\"svg\", { xmlns: \"http://www.w3.org/2000/svg\", height: \"24px\", viewBox: \"0 0 24 24\", width: \"24px\", fill: \"#000000\" }, h(\"path\", { d: \"M0 0h24v24H0z\", fill: \"none\" }), h(\"path\", { d: \"M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12V1zm3 4H8c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h11c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm0 16H8V7h11v14z\" }))))), h(\"div\", { class: \"dnn-color-mode-switch\" }, h(\"button\", { id: \"hex-switch\", onClick: this.switchColorMode.bind(this), \"aria-label\": \"Switch to hue saturation lightness values\" }, h(\"svg\", { xmlns: \"http://www.w3.org/2000/svg\", height: \"24px\", viewBox: \"0 0 24 24\", width: \"24px\", fill: \"#000000\" }, h(\"path\", { d: \"M0 0h24v24H0z\", fill: \"none\" }), h(\"path\", { d: \"M7 7h10v3l4-4-4-4v3H5v6h2V7zm10 10H7v-3l-4 4 4 4v-3h12v-6h-2v4z\" }))))))));\n  }\n  static get is() { return \"dnn-color-picker\"; }\n  static get encapsulation() { return \"shadow\"; }\n  static get originalStyleUrls() {\n    return {\n      \"$\": [\"dnn-color-picker.scss\"]\n    };\n  }\n  static get styleUrls() {\n    return {\n      \"$\": [\"dnn-color-picker.css\"]\n    };\n  }\n  static get properties() {\n    return {\n      \"color\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string\",\n          \"resolved\": \"string\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Sets the initial color, must be a valid 8 character hexadecimal string without the # sign.\"\n        },\n        \"attribute\": \"color\",\n        \"reflect\": false,\n        \"defaultValue\": \"\\\"FFFFFF\\\"\"\n      },\n      \"colorBoxHeight\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string\",\n          \"resolved\": \"string\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"example\",\n              \"text\": \"100% renders a perfect square\"\n            }],\n          \"text\": \"Sets the width-height ratio of the color picker saturation-lightness box.\"\n        },\n        \"attribute\": \"color-box-height\",\n        \"reflect\": false,\n        \"defaultValue\": \"\\\"50%\\\"\"\n      }\n    };\n  }\n  static get states() {\n    return {\n      \"currentColor\": {},\n      \"rgbDisplay\": {},\n      \"hslDisplay\": {},\n      \"hexDisplay\": {}\n    };\n  }\n  static get events() {\n    return [{\n        \"method\": \"colorChanged\",\n        \"name\": \"colorChanged\",\n        \"bubbles\": true,\n        \"cancelable\": true,\n        \"composed\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"see\",\n              \"text\": \".. /../utilities/colorInfo.ts\"\n            }],\n          \"text\": \"Fires up when the color is changed and emits a ColorInfo object\"\n        },\n        \"complexType\": {\n          \"original\": \"ColorInfo\",\n          \"resolved\": \"ColorInfo\",\n          \"references\": {\n            \"ColorInfo\": {\n              \"location\": \"import\",\n              \"path\": \"../../utilities/colorInfo\"\n            }\n          }\n        }\n      }];\n  }\n  static get elementRef() { return \"el\"; }\n  static get watchers() {\n    return [{\n        \"propName\": \"currentColor\",\n        \"methodName\": \"handeCurrentColorChanged\"\n      }];\n  }\n}\n__decorate([\n  Debounce(100)\n], DnnColorPicker.prototype, \"colorChangedHandler\", null);\n//# sourceMappingURL=dnn-color-picker.js.map\n"],"mappings":"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"}