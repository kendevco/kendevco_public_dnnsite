<?xml version="1.0" encoding="utf-8"?>
<Validations>

    <Validation>
        <Title>Email Address</Title>
        <Type>avt.ActionForm.Core.Validation.ValidatorRegex, avt.ActionForm.Core</Type>
        <JsValidator>email</JsValidator>
        <Params>
            <Regex>^(?:[a-z0-9!#$%&amp;'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&amp;'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])$</Regex>
            <IgnoreCase>true</IgnoreCase>
        </Params>
        <ErrorMessage>
            <key>validation.email</key>
            <default>Please enter a valid email address.</default>
        </ErrorMessage>
    </Validation>

    <Validation>
        <Title>Web Address</Title>
        <Type>avt.ActionForm.Core.Validation.ValidatorRegex, avt.ActionForm.Core</Type>
        <JsValidator>url</JsValidator>
        <Params>
            <Regex>^((ftp|http|https):+\/\/)?(www.)?([a-zA-Z0-9_.-])+\.[a-z]+([^ ]*)|^(((http|https):+\/\/)?localhost:(0|[1-9][0-9]{0,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]))([^ ]*)$</Regex>
            <IgnoreCase>true</IgnoreCase>
        </Params>
        <ErrorMessage>
            <key>validation.url</key>
            <default>The web address is invalid!</default>
        </ErrorMessage>
    </Validation>

    <Validation>
      <Title>Domain Validator</Title>
      <Type>avt.ActionForm.Core.Validation.ValidatorRegex, avt.ActionForm.Core</Type>
      <JsValidator>domain</JsValidator>
      <Params>
        <Regex>^(([a-zA-Z]{1})|([a-zA-Z]{1}[a-zA-Z]{1})|([a-zA-Z]{1}[0-9]{1})|([0-9]{1}[a-zA-Z]{1})|([a-zA-Z0-9][-_\.a-zA-Z0-9]{1,61}[a-zA-Z0-9]))\.([a-zA-Z]{2,13}|[a-zA-Z0-9-]{2,30}\.[a-zA-Z]{2,3})(\:([1-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]))?$</Regex>
        <IgnoreCase>true</IgnoreCase>
      </Params>
      <ErrorMessage>
        <key>validation.domain</key>
        <default>The specified domain is invalid!</default>
      </ErrorMessage>
    </Validation>
  
    <Validation>
        <Title>Password</Title>
        <Type>avt.ActionForm.Core.Validation.ValidatorPassword, avt.ActionForm.Core</Type>
        <JsValidator>dnnsfpassword</JsValidator>
        <Params>
            
            <IgnoreCase>true</IgnoreCase>
        </Params>
        <ErrorMessage>
            <key>validation.password</key>
            <default>Please enter a valid password.</default>
        </ErrorMessage>
    </Validation>

    <Validation>
        <Title>Positive Integer Number</Title>
        <Type>avt.ActionForm.Core.Validation.ValidatorRegex, avt.ActionForm.Core</Type>
        <JsValidator>numberPositive</JsValidator>
        <Params>
            <Regex>^\s*\d+\s*$</Regex>
        </Params>
        <ErrorMessage>
            <key>validation.numberPositive</key>
            <default>Please enter a valid positive integer number.</default>
        </ErrorMessage>
    </Validation>
    <Validation>
        <Title>Strictly Positive Integer Number</Title>
        <Type>avt.ActionForm.Core.Validation.ValidatorRegex, avt.ActionForm.Core</Type>
        <JsValidator>numberStrictlyPositive</JsValidator>
        <Params>
            <Regex>^\s*[1-9]+\d*\s*$</Regex>
        </Params>
        <ErrorMessage>
            <key>validation.numberStrictlyIntegerPositive</key>
            <default>Please enter a valid strictly positive integer number.</default>
        </ErrorMessage>
    </Validation>
  
  <Validation>
      <Title>Credit Card Number</Title>
      <Type>avt.ActionForm.Core.Validation.ValidatorRegex, avt.ActionForm.Core</Type>
      <JsValidator>creditCardNumber</JsValidator>
      <Params>
        <Regex>^(?:4[0-9]{12}(?:[0-9]{3})?|[25][1-7][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\d{3})\d{11})$</Regex>
      </Params>
      <ErrorMessage>
        <key>validation.creditCardNumber</key>
        <default>Please enter a valid Visa, MasterCard, American Express, Diners Club, Discover or JCB card number.</default>
      </ErrorMessage>
    </Validation>

    <Validation>
      <Title>Visa Card Number</Title>
      <Type>avt.ActionForm.Core.Validation.ValidatorRegex, avt.ActionForm.Core</Type>
      <JsValidator>visaCardNumber</JsValidator>
      <Params>
        <Regex>^4[0-9]{12}(?:[0-9]{3})?$</Regex>
      </Params>
      <ErrorMessage>
        <key>validation.visaCardNumber</key>
        <default>Please enter a valid Visa card number.</default>
      </ErrorMessage>
    </Validation>
    <Validation>
      <Title>Master Card Number</Title>
      <Type>avt.ActionForm.Core.Validation.ValidatorRegex, avt.ActionForm.Core</Type>
      <JsValidator>mastercardCardNumber</JsValidator>
      <Params>
        <Regex>^5[1-5][0-9]{14}$</Regex>
      </Params>
      <ErrorMessage>
        <key>validation.mastercardCardNumber</key>
        <default>Please enter a valid MasterCard card number.</default>
      </ErrorMessage>
    </Validation>
    <Validation>
      <Title>AMEX Card Number</Title>
      <Type>avt.ActionForm.Core.Validation.ValidatorRegex, avt.ActionForm.Core</Type>
      <JsValidator>amexCardNumber</JsValidator>
      <Params>
        <Regex>^3[47][0-9]{13}$</Regex>
      </Params>
      <ErrorMessage>
        <key>validation.amexCardNumber</key>
        <default>Please enter a valid American Express card number.</default>
      </ErrorMessage>
    </Validation>
    <Validation>
      <Title>Discover Card Number</Title>
      <Type>avt.ActionForm.Core.Validation.ValidatorRegex, avt.ActionForm.Core</Type>
      <JsValidator>discoverCardNumber</JsValidator>
      <Params>
        <Regex>^6(?:011|5[0-9]{2})[0-9]{12}$</Regex>
      </Params>
      <ErrorMessage>
        <key>validation.discoverCardNumber</key>
        <default>Please enter a valid Discover card number.</default>
      </ErrorMessage>
    </Validation>
    <Validation>
        <Title>Integer Number</Title>
        <Type>avt.ActionForm.Core.Validation.ValidatorRegex, avt.ActionForm.Core</Type>
        <JsValidator>number</JsValidator>
        <Params>
            <Regex>^\s*-?\d+\s*$</Regex>
        </Params>
        <ErrorMessage>
            <key>validation.number</key>
            <default>Please enter a valid integer number.</default>
        </ErrorMessage>
    </Validation>

    <Validation>
        <Title>Letters Only</Title>
        <Type>avt.ActionForm.Core.Validation.ValidatorRegex, avt.ActionForm.Core</Type>
        <JsValidator>lettersOnly</JsValidator>
        <Params>
            <Regex>^[A-Za-z\s]*$</Regex>
        </Params>
        <ErrorMessage>
            <key>validation.lettersOnly</key>
            <default>Only letters allowed.</default>
        </ErrorMessage>
    </Validation>
    
    <Validation>
        <Title>Positive Floating Point Number</Title>
        <Type>avt.ActionForm.Core.Validation.ValidatorRegex, avt.ActionForm.Core</Type>
        <JsValidator>floatPositive</JsValidator>
        <Params>
            <Regex>^\s*\d+(\.\d+)?\s*$</Regex>
        </Params>
        <ErrorMessage>
            <key>validation.floatPositive</key>
            <default>Please enter a valid positive float number.</default>
        </ErrorMessage>
    </Validation>
    <Validation>
        <Title>Strictly Positive Floating Point Number</Title>
        <Type>avt.ActionForm.Core.Validation.ValidatorRegex, avt.ActionForm.Core</Type>
        <JsValidator>floatStrictlyPositive</JsValidator>
        <Params>
            <Regex>^\s*([1-9]\d*(\.\d+)?|0+\.\d*[1-9]\d*)$</Regex>
        </Params>
        <ErrorMessage>
            <key>validation.numberStrictlyPositive</key>
            <default>Please enter a valid strictly positive number.</default>
        </ErrorMessage>
    </Validation>

    <Validation>
        <Title>Floating Point Number</Title>
        <Type>avt.ActionForm.Core.Validation.ValidatorRegex, avt.ActionForm.Core</Type>
        <JsValidator>float</JsValidator>
        <Params>
            <Regex>^\s*-?\d+(\.\d+)?\s*$</Regex>
        </Params>
        <ErrorMessage>
            <key>validation.float</key>
            <default>Please enter a valid number.</default>
        </ErrorMessage>
    </Validation>

    <Validation>
        <Title>Strip HTML</Title>
        <Type>avt.ActionForm.Core.Validation.ValidatorRegexReplace, avt.ActionForm.Core</Type>
        <Params>
            <Regex>&lt;(.|\n)*?&gt;</Regex>
            <ReplaceWith></ReplaceWith>
        </Params>
    </Validation>

    <Validation>
        <Title>Phone (###) ###-####</Title>
        <Type>avt.ActionForm.Core.Validation.ValidatorRegex, avt.ActionForm.Core</Type>
        <JsValidator>phoneus</JsValidator>
        <Params>
            <Regex>^([\(]{1}[0-9]{3}[\)]{1}[\.| |\-]{0,1}|^[0-9]{3}[\.|\-| ]?)?[0-9]{3}(\.|\-| )?[0-9]{4}$</Regex>
        </Params>
        <ErrorMessage>
            <key>validation.phoneUS</key>
            <default>Phone number must be in format (###) ###-####.</default>
        </ErrorMessage>
    </Validation>
    
    <Validation>
        <Title>Date US (mm/dd/yyyy)</Title>
        <Type>avt.ActionForm.Core.Validation.ValidatorRegex, avt.ActionForm.Core</Type>
        <JsValidator>dateus</JsValidator>
        <Params>
            <Regex>^\b([1-9]|0[1-9]|1[0-2])\b\/\b([1-9]|0[1-9]|1[0-9]|2[0-9]|3[0-1])\b\/\b(1[0-9]{3}|2[0-9]{3})\b$</Regex>
        </Params>
        <ErrorMessage>
            <key>validation.dateUS</key>
            <default>Date must be in format mm/dd/yyyy.</default>
        </ErrorMessage>
    </Validation>

    <Validation>
        <Title>No Whitespace</Title>
        <Type>avt.ActionForm.Core.Validation.ValidatorRegex, avt.ActionForm.Core</Type>
        <JsValidator>nowhitespace</JsValidator>
        <Params>
            <Regex>^[^ ]*$</Regex>
        </Params>
        <ErrorMessage>
            <key>validation.nowhitespace</key>
            <default>No spaces are allowed.</default>
        </ErrorMessage>
    </Validation>
	
	
	<Validation>
        <Title>Username is Available</Title>
        <Type>avt.ActionForm.Core.Validation.SqlValidation, avt.ActionForm.Core</Type>
        <JsValidator>validUsername</JsValidator>
        <Params>
            <Sql>
			<![CDATA[
				if exists(select UserId from {databaseOwner}[{objectQualifier}Users] where username = '{value}')
					select 'User already exists'
			]]>
			</Sql>
        </Params>
    </Validation>

    <Validation>
        <Title>Username is Available (excluding current user)</Title>
        <Type>avt.ActionForm.Core.Validation.SqlValidation, avt.ActionForm.Core</Type>
        <JsValidator>validUsernameExcludeCurrent</JsValidator>
        <Params>
            <Sql>
                <![CDATA[
				if exists(select UserId from {databaseOwner}[{objectQualifier}Users] where username = '{value}' and username != '[User:Username]')
					select 'User already exists'
			]]>
            </Sql>
        </Params>
    </Validation>

    <Validation>
        <Title>User exists (by email)</Title>
        <Type>avt.ActionForm.Core.Validation.SqlValidation, avt.ActionForm.Core</Type>
        <JsValidator>validUsernameByEmail</JsValidator>
        <Params>
            <Sql>
			<![CDATA[
				if not exists(select top 1 UserId from {databaseOwner}[{objectQualifier}Users] where Email = '{value}')
					select 'Not registered. <a href="/Register.aspx">Click here</a> to register.'
			]]>
			</Sql>
        </Params>
		
    </Validation>

    <Validation>
        <Title>CNP (Numeric Personal Code)</Title>
        <Type>avt.ActionForm.Core.Validation.ValidatorCnp, avt.ActionForm.Core</Type>
        <JsValidator>validcnp</JsValidator>
        <Params> </Params>
        <ErrorMessage>
            <key>validation.validcnp</key>
            <default>Please enter a valid Numeric Personal Code</default>
        </ErrorMessage>
    </Validation>
    
</Validations>
