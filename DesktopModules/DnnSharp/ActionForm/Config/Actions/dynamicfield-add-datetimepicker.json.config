[
  {
    "Id": "AddDateTimePicker",
    "Title": {
      "default": "Add Date Time Picker"
    },
    "HelpText": {
      "default": "This action will add a Date Time Picker to the specified dynamic container."
    },
    "TypeStr": "avt.ActionForm.Core.Actions.DynamicFields.AddDateTimePicker, avt.ActionForm.Core",
    "Settings": {
      "Group": "Dynamic Fields",
      "TemplateFile": "controls/datetime-flatpickr.xsl",
      "IsoTimeFormat": "HH':'mm",
      "IsoTimeWithSecondsFormat": "HH':'mm':'ss",
      "IsoTimeSpanFormat": "hh':'mm",
      "IsoTimeSpanWithSecondsFormat": "hh':'mm':'ss",
      "IsoDateFormat": "yyyy-MM-dd",
      "IsoDateTimeFormat": "yyyy-MM-dd'T'HH:mm:ssK",
      "IsoDateTimeWithMillisecondsFormat": "yyyy-MM-dd'T'HH:mm:ss.FFFFFFFK"
    },
    "JsIncludes": [
      "[commonUrl]/static/angular15/datetime-flatpickr/bundle.js",
      "[commonUrl]/static/angular15/datetime-flatpickr/flatpickr.min.js",
      "[commonUrl]/static/angular15/datetime-flatpickr/datetime-flatpickr.js"
    ],
    "CssIncludes": [
      "[commonUrl]/static/angular15/datetime-flatpickr/flatpickr.min.css",
      "[commonUrl]/static/angular15/datetime-flatpickr/bstrap3-fixes.css",
      "[commonUrl]/static/angular15/datetime-flatpickr/datetime-flatpickr.css"
    ],
    "Parameters": [
      {
        "Id": "ContainerId",
        "Title": {
          "default": "Container Id"
        },
        "HelpText": {
          "default": "This is the Container Id to place this hidden field into. Eg. Add a Dynamic Field Container having id DynamicFieldContainer. \"DynamicFieldContainer\" is the ID of the field.<br/> Supports Tokens."
        },
        "Type": "Text"
      },
      {
        "Id": "FieldId",
        "Title": {
          "default": "Field Id"
        },
        "HelpText": {
          "default": "Required. Give this field an id so you can reference it later.<br/> Supports Tokens."
        },
        "Type": "Text"
      },
      {
        "Id": "FieldDescription",
        "Title": {
          "default": "Field Description"
        },
        "HelpText": {
          "default": "Give this field a description.<br/> Supports Tokens."
        },
        "Type": "Text"
      },
      {
        "Id": "FieldName",
        "Title": {
          "default": "Field Title"
        },
        "HelpText": {
          "default": "Give this field an title/name which is a label.<br/> Supports Tokens."
        },
        "Type": "Text"
      },
      {
        "Id": "InitialValue",
        "Type": "Text",
        "Title": {
          "default": "Initial Value"
        },
        "HelpText": {
          "default": "Provide a date for preload.<br> Hint: When initializing from Run SQL Query Action you need to use the new tokens that are generated by the action for date/datetime/datetime2/datetimeoffset columns: <code class=\"token\">[&lt;column&gt;:ISO]</code>, <code class=\"token\">[&lt;column&gt;:ISODate]</code> or <code class=\"token\">[&lt;column&gt;:ISOAsUtc]</code>. More info in the Run SQL Query action help text. <br/>Supports Tokens."
        },
        "IsPublic": false
      },
      {
        "Id": "ClientFormat",
        "Type": "Text",
        "Title": {
          "default": "Client Format"
        },
        "HelpText": {
          "default": "The format that will be displayed to the user.<a target='_blank' href='https://docs.microsoft.com/en-us/dotnet/standard/base-types/custom-date-and-time-format-strings'>Date/DateTime picker format strings</a> or <a target='_blank' href='https://docs.microsoft.com/en-us/dotnet/standard/base-types/custom-timespan-format-strings'>Time picker format strings.</a> Supports Tokens."
        },
        "IsPublic": false
      },
      {
        "Id": "PickerType",
        "Type": "Select",
        "Title": {
          "default": "Picker Type"
        },
        "DefaultValue": {
          "default": "dateandtime"
        },
        "Settings": {
          "Items": {
            "dateandtime": {
              "default": "Date and Time"
            },
            "date": {
              "default": "Date"
            },
            "time": {
              "default": "Time"
            }
          }
        },
        "IsPublic": true
      },
      {
        "Id": "DisableFutureOrPast",
        "Type": "Select",
        "Title": {
          "default": "Disable Dates"
        },
        "DefaultValue": {
          "default": "none"
        },
        "Settings": {
          "Items": {
            "none": {
              "default": "None"
            },
            "past": {
              "default": "In The Past"
            },
            "future": {
              "default": "In The Future"
            }
          },
          "ShowCondition": "itemParameters['PickerType'].Value != 'time'"
        },
        "HelpText": {
          "default": "Disable every date in the future or every date in the past."
        },
        "IsPublic": true
      },
      {
        "Id": "FirstDayOfWeek",
        "Type": "Select",
        "Title": {
          "default": "First Day of the Week"
        },
        "DefaultValue": {
          "default": "sunday"
        },
        "Settings": {
          "Items": {
            "sunday": {
              "default": "Sunday"
            },
            "monday": {
              "default": "Monday"
            }
          },
          "ShowCondition": "itemParameters['PickerType'].Value != 'time'"
        },
        "IsPublic": true
      },
      {
        "Id": "DisableWeekends",
        "Title": {
          "default": "Disable Weekends"
        },
        "Type": "Boolean",
        "DefaultValue": {
          "default": "false"
        },
        "HelpText": {
          "default": "Check this to disable saturdays and sundays."
        },
        "Settings": {
          "ShowCondition": "itemParameters['PickerType'].Value != 'time'"
        },
        "IsPublic": true
      },
      {
        "Id": "Inline",
        "Title": {
          "default": "Inline"
        },
        "Type": "Boolean",
        "DefaultValue": {
          "default": "false"
        },
        "HelpText": {
          "default": "Calendar is visible without clicking inside the field."
        },
        "IsPublic": true
      },
      {
        "Id": "Time24Hours",
        "Type": "Boolean",
        "Title": {
          "default": "Timepicker 24 hour mode"
        },
        "HelpText": {
          "default": "Displays time picker in 24 hour mode without AM/PM selection when enabled."
        },
        "DefaultValue": {
          "default": "false"
        },
        "Settings": {
          "ShowCondition": "itemParameters['PickerType'].Value != 'date'"
        },
        "IsPublic": true
      },
      {
        "Id": "MinDate",
        "Type": "Text",
        "Title": {
          "default": "Minimum Date"
        },
        "HelpText": {
          "default": "The minimum date that a user can start picking from (inclusive). Format: yyyy-MM-dd. Supports Tokens."
        },
        "IsPublic": false,
        "Settings": {
          "ShowCondition": "itemParameters['PickerType'].Value != 'time' && itemParameters['DisableFutureOrPast'].Value != 'past'"
        }
      },
      {
        "Id": "MaxDate",
        "Type": "Text",
        "Title": {
          "default": "Maximum Date"
        },
        "HelpText": {
          "default": "The maximum date that a user can pick to (inclusive). Format: yyyy-MM-dd. Supports Tokens."
        },
        "IsPublic": false,
        "Settings": {
          "ShowCondition": "itemParameters['PickerType'].Value != 'time' && itemParameters['DisableFutureOrPast'].Value != 'future'"
        }
      },
      {
        "Id": "MinTime",
        "Type": "Text",
        "Title": {
          "default": "Minimum Time"
        },
        "HelpText": {
          "default": "The minimum time that a user can start picking from (inclusive). Format: HH:mm. Supports Tokens."
        },
        "IsPublic": false,
        "Settings": {
          "ShowCondition": "itemParameters['PickerType'].Value != 'date'"
        }
      },
      {
        "Id": "MaxTime",
        "Type": "Text",
        "Title": {
          "default": "Maximum Time"
        },
        "HelpText": {
          "default": "The maximum time that a user can pick to (inclusive). Format: HH:mm. Supports Tokens."
        },
        "IsPublic": false,
        "Settings": {
          "ShowCondition": "itemParameters['PickerType'].Value != 'date'"
        }
      },
      {
        "Id": "MinuteIncrement",
        "Type": "Text",
        "Title": {
          "default": "Minute Increment"
        },
        "DefaultValue": {
          "default": "5"
        },
        "HelpText": {
          "default": "Adjusts the step for the minute input (incl. scrolling). Defaults to 5."
        },
        "IsPublic": true,
        "Settings": {
          "ShowCondition": "itemParameters['PickerType'].Value != 'date'"
        }
      },
      {
        "Id": "BindShow",
        "Title": {
          "default": "Bind Expression - Show"
        },
        "HelpText": {
          "default": "Dynamically show or hide this field. This must be a boolean expression. Use standard javascript boolean operators (==, !=, &#x3C;,&#x3E; , !). For example, use [PaymentMethod] == &#x27;CreditCard&#x27; to show the credit card field only when the Payment Method is set accordingly.<br/> Supports Tokens."
        },
        "Type": "Text"
      },
      {
        "Id": "BindPreserveLayout",
        "Title": {
          "default": "Preserve Layout?"
        },
        "HelpText": {
          "default": "Check this box in order to make sure hiding/showing fields will not affect the layout of the form."
        },
        "Type": "Boolean"
      },
      {
        "Id": "BindValue",
        "Title": {
          "default": "Bind Expression - Value"
        },
        "HelpText": {
          "default": "Dynamically compute the value of this field. So when other fields change this fields updates automatically. Use standard javascript operators where needed (+, -, *, /). For example, use [FirstName] + &#x27; &#x27; + [LastName] to automatically fill the Display Name field. Note that once the value is edited manually, the automatic synchronization stops.<br/> Supports Tokens."
        },
        "Type": "Text"
      },
      {
        "Id": "BindOnChange",
        "Title": {
          "default": "Bind Expression - On Change/Click"
        },
        "HelpText": {
          "default": "Bind some javascript code to execute when the value in this field changes or when a button is clicked. Access the form fields by using syntax [FieldId] which maps to the js object form.fields.FieldId.value. For buttons, you can &#x22;return false;&#x22; to prevent the form from submitting.<br/> Supports Tokens."
        },
        "Type": "Textarea"
      },
      {
        "Id": "TokenizeBindExpressions",
        "Title": {
          "default": "Tokenize Bind Expressions?"
        },
        "HelpText": {
          "default": "Check this box in order to tokenize the Bind Expressions fields. This is useful when you dynamically compute the id values so you need to tokenize and obtain the real IDs first."
        },
        "Type": "Boolean"
      },
      {
        "Id": "FieldIdTokenName",
        "Title": {
          "default": "Field ID Token Name"
        },
        "HelpText": {
          "default": "Similarly to normal fields, the ID is the name/inputted id sanitized. This means that if you dynamically generate id's, they might contain spaces or other invalid characters. For this, we output the sanitized id of the field. Give a name to this token which holds the sanitized ID."
        },
        "Type": "Text"
      }
    ]
  }
]
