[
  {
    "Id": "AddMultiFileUpload",
    "Title": {
      "default": "Add Multi File Upload"
    },
    "HelpText": {
      "default": "This action will add a multi file upload to the specified dynamic container."
    },
    "TypeStr": "avt.ActionForm.Core.Actions.DynamicFields.AddMultiFileUpload, avt.ActionForm.Core",
    "Settings": {
      "Group": "Dynamic Fields"
    },
    "Parameters": [
      {
        "Id": "ContainerId",
        "Title": {
          "default": "Container Id"
        },
        "HelpText": {
          "default": "This is the Container Id to place this multi file upload into. Eg. Add a Dynamic Field Container having id DynamicFieldContainer. \"DynamicFieldContainer\" is the ID of the field.<br/> Supports Tokens."
        },
        "Type": "Text"
      },
      {
        "Id": "FieldId",
        "Title": {
          "default": "Field Id"
        },
        "HelpText": {
          "default": "Required. Give this field an id so you can reference it later.<br/> Supports Tokens."
        },
        "Type": "Text"
      },
      {
        "Id": "FieldName",
        "Title": {
          "default": "Field Title"
        },
        "HelpText": {
          "default": "Give this field an title/name which is a label.<br/> Supports Tokens."
        },
        "Type": "Text"
      },
      {
        "Id": "FieldDescription",
        "Title": {
          "default": "Field Description"
        },
        "HelpText": {
          "default": "Give this field a description.<br/> Supports Tokens."
        },
        "Type": "Text"
      },
      {
        "Id": "Pattern",
        "Title": {
          "default": "Filename Pattern"
        },
        "HelpText": {
          "default": "Optionally provide a pattern to use for filenames on the server. For example \"[User:Username]-avatar\". Leave blank to use the original filename. Here you can use [&lt;FieldName&gt;], [&lt;FieldName&gt;:FileName], [&lt;FieldName&gt;:FileNameAndExtension], [&lt;FieldName&gt;:FileExtension] (note the file name is before the duplication handling). Supports Tokens"
        },
        "Type": "Text",
        "IsPublic": true
      },
      {
        "Id": "Actions",
        "Title": {
          "default": "For Each File"
        },
        "HelpText": {
          "default": "Execute actions on each uploaded file. Following tokens are available: [FileName] [RelativeUrl], [AbsoluteUrl], [FilePath] (physical path), [LinkClick], [Stream] (file stream, for example to upload into database), [Base64], [FileSize], [FileSizeB], [FileSizeKB], [FileSizeMB], [FileSizeGB], [MimeType], [FileId], [FolderId], [FolderPath], [FileExtension]. <br/> Also creates [FileOrThumbnailNameAndExtension]. This token contains the file name and extension, but if the field is used in a create thumbnail action it will be overwriten with then thumbnail value."
        },
        "Type": "ActionList",
        "Settings": {
          "Event": "click"
        }
      },
      {
        "Id": "FileExt",
        "Title": {
          "default": "File Types"
        },
        "HelpText": {
          "default": "Optionally provide a series of file types to limit the upload to these specific types. For example \"txt,cs,doc\". Supports Tokens."
        },
        "Type": "Text",
        "IsPublic": true
      },
      {
        "Id": "FileLimit",
        "Title": {
          "default": "File Size Limit"
        },
        "HelpText": {
          "default": "Optionally provide a file size(MB) to limit the upload. For example \"12.8\". Use file size [FieldName:FileSize] and file size unit tokens [FieldName:FileSizeB], [FieldName:FileSizeKB], [FieldName:FileSizeMB], [FieldName:FileSizeGB]; file extension token [FieldName:FileExtension] and [FieldName:MimeType] token."
        },
        "Type": "Text",
        "IsPublic": true
      },
      {
        "Id": "MaxSizeInError",
        "Title": {
          "default": "Show max size in error"
        },
        "Type": "Boolean",
        "IsPublic": true
      },
      {
        "Id": "FolderInputMode",
        "Title": {
          "default": "Folder Input Mode"
        },
        "HelpText": {
          "default": "Switch between providing a folder path or providing a folder id."
        },
        "DefaultValue": {
          "default": "FolderPath"
        },
        "Type": "Select",
        "IsPublic": true,
        "Settings": {
          "Items": {
            "FolderPath": {
              "default": "Folder Path"
            },
            "FolderId": {
              "default": "Folder ID"
            }
          }
        }
      },
      {
        "Id": "Folder",
        "Title": {
          "default": "Upload to Folder"
        },
        "Type": "Select",
        "IsPublic": true,
        "Settings": {
          "DataSource": "PortalFolderList",
          "SupportsExpressions": "true",
          "ShowCondition": "!itemParameters[\"FolderInputMode\"] || !itemParameters[\"FolderInputMode\"].Value || itemParameters[\"FolderInputMode\"].Value == 'FolderPath'"
        }
      },
      {
        "Id": "FolderId",
        "Title": {
          "default": "Upload to Folder ID"
        },
        "Type": "Text",
        "IsPublic": true,
        "Settings": {
          "ShowCondition": "itemParameters[\"FolderInputMode\"].Value == 'FolderId'"
        }
      },
      {
        "Id": "Duplicates",
        "Title": {
          "default": "Handle Duplicates"
        },
        "DefaultValue": {
          "default": "Rename"
        },
        "Type": "Select",
        "Settings": {
          "DataSource": "avt.ActionForm.Core.Services.eHandleDuplicates,avt.ActionForm.Core"
        }
      },
      {
        "Id": "InitialValue",
        "Title": {
          "default": "Initial Value"
        },
        "HelpText": {
          "default": "Give this field an initial value.<br/> Supports Tokens."
        },
        "Type": "Text"
      },
      {
        "Id": "BindShow",
        "Title": {
          "default": "Bind Expression - Show"
        },
        "HelpText": {
          "default": "Dynamically show or hide this field. This must be a boolean expression. Use standard javascript boolean operators (==, !=, &#x3C;,&#x3E; , !). For example, use [PaymentMethod] == &#x27;CreditCard&#x27; to show the credit card field only when the Payment Method is set accordingly.<br/> Supports Tokens."
        },
        "Type": "Text"
      },
      {
        "Id": "BindPreserveLayout",
        "Title": {
          "default": "Preserve Layout?"
        },
        "HelpText": {
          "default": "Check this box in order to make sure hiding/showing fields will not affect the layout of the form."
        },
        "Type": "Boolean"
      },
      {
        "Id": "BindValue",
        "Title": {
          "default": "Bind Expression - Value"
        },
        "HelpText": {
          "default": "Dynamically compute the value of this field. So when other fields change this fields updates automatically. Use standard javascript operators where needed (+, -, *, /). For example, use [FirstName] + &#x27; &#x27; + [LastName] to automatically fill the Display Name field. Note that once the value is edited manually, the automatic synchronization stops.<br/> Supports Tokens."
        },
        "Type": "Text"
      },
      {
        "Id": "BindOnChange",
        "Title": {
          "default": "Bind Expression - On Change/Click"
        },
        "HelpText": {
          "default": "Bind some javascript code to execute when the value in this field changes or when a button is clicked. Access the form fields by using syntax [FieldId] which maps to the js object form.fields.FieldId.value. For buttons, you can &#x22;return false;&#x22; to prevent the form from submitting.<br/> Supports Tokens."
        },
        "Type": "Textarea"
      },
      {
        "Id": "TokenizeBindExpressions",
        "Title": {
          "default": "Tokenize Bind Expressions?"
        },
        "HelpText": {
          "default": "Check this box in order to tokenize the Bind Expressions fields. This is useful when you dynamically compute the id values so you need to tokenize and obtain the real IDs first."
        },
        "Type": "Boolean"
      },
      {
        "Id": "ControlCssClass",
        "Title": {
          "default": "CSS Class"
        },
        "HelpText": {
          "default": "Set CSS classes on the input control. This is appended to the container's UI settings! <br/> Supports Tokens."
        },
        "Type": "Text"
      },
      {
        "Id": "ControlCssStyle",
        "Title": {
          "default": "CSS Styles"
        },
        "HelpText": {
          "default": "Set inline styles on the input control. This is appended to the container's UI settings! <br/> Supports Tokens."
        },
        "Type": "Text"
      },
      {
        "Id": "LabelCssClass",
        "Title": {
          "default": "Label CSS Class"
        },
        "HelpText": {
          "default": "Set CSS classes on the input label. This is appended to the container's UI settings!<br/> Supports Tokens."
        },
        "Type": "Text"
      },
      {
        "Id": "LabelCssStyle",
        "Title": {
          "default": "Label CSS Styles"
        },
        "HelpText": {
          "default": "Set inline styles on the input label. This is appended to the container's UI settings!<br/> Supports Tokens."
        },
        "Type": "Text"
      },
      {
        "Id": "IsRequired",
        "Title": {
          "default": "Is Required"
        },
        "HelpText": {
          "default": "Specify if this field is required.<br/> Supports Tokens."
        },
        "Type": "Text"
      },
      {
        "Id": "ValidationCondition",
        "Title": {
          "default": "Validation Condition"
        },
        "HelpText": {
          "default": "This boolean expression is used to determine if this field validation will execute. It supports C# syntax. A common example is [SomeField] == \"Some Value\" or [SomeField].IndexOf(\"something\") == 0. This field supports Tokens. <br/>Note that the tokenization will take place when you <b>submit</b> the form and you have access to the values of the submitted fields."
        },
        "Type": "Text"
      },
      {
        "Id": "CustomValidator1",
        "Title": {
          "default": "Custom Validator #1"
        },
        "HelpText": {
          "default": ""
        },
        "Type": "Select",
        "Settings": {
          "ColSize": 4,
          "Interpolate": true,
          "DataSourceMethod": "GetCustomValidatorTitles",
          "SupportsExpressions": "true"
        }
      },
      {
        "Id": "CustomValidator2",
        "Title": {
          "default": "Custom Validator #2"
        },
        "HelpText": {
          "default": ""
        },
        "Type": "Select",
        "Settings": {
          "ColSize": 4,
          "Interpolate": true,
          "DataSourceMethod": "GetCustomValidatorTitles",
          "SupportsExpressions": "true"
        }
      },
      {
        "Id": "TokenizeValidators",
        "Title": {
          "default": "Tokenize Validators?"
        },
        "HelpText": {
          "default": "Check this box in order to tokenize the Validator fields and the Validation Condition field. This is useful when you need to use tokens for validation at Form Initialization."
        },
        "Type": "Boolean",
        "DefaultValue": {
          "default": "True"
        }
      },
      {
        "Id": "FieldIdTokenName",
        "Title": {
          "default": "Field ID Token Name"
        },
        "HelpText": {
          "default": "Similarly to normal fields, the ID is the name/inputted id sanitized. This means that if you dynamically generate id's, they might contain spaces or other invalid characters. For this, we output the sanitized id of the field. Give a name to this token which holds the sanitized ID."
        },
        "Type": "Text"
      }
    ]
  }
]
