[
  {
    "Id": "RunSql",
    "Title": {
      "default": "Run SQL Query"
    },
    "TypeStr": "DnnSharp.Common.Actions.Data.ExecuteSql, DnnSharp.Common.Actions",
    "Settings": {
      "Group": "Data"
    },
    "IsHostAction": "true",
    "HelpText": {
      "default": "Executes the specified SQL query, optionally storing the output for use in other actions."
    },
    "Parameters": [
      {
        "Id": "ConnectionString",
        "Title": {
          "default": "Other Connection String"
        },
        "HelpText": {
          "default": "Leave empty to use the DNN database. Also supports the name of a connection string from the database. It will respect the Provider (ODBC, SqlClient, etc.). Can contain Tokens."
        },
        "Type": "Text"
      },
      {
        "Id": "QueryTimeout",
        "Title": {
          "default": "Query Timeout"
        },
        "HelpText": {
          "default": "Set a time in seconds after which a query will time out. The default is set 10 minutes or 600 seconds also this parameter can't be negative or under 10 seconds. Can contain Tokens. "
        },
        "Type": "Text"
      },
      {
        "Id": "SqlQuery",
        "Title": {
          "default": "SQL Query"
        },
        "HelpText": {
          "default": "SQL to execute. Can contain Tokens. <br/> <div style=\"color:red\">WARNING!</div> We encourage using binding parameters instead of using the tokens directly on sql query. Just use @param instead of [token] and bind below values as shown: Parameter Name: param ; Parameter Value: [token]. This will keep your database safe.<br/>"
        },
        "Type": "Code",
        "Settings": {
          "CodeMirrorMode": "sql"
        },
        "Validation": [
          {
            "Type": "Required"
          }
        ]
      },
      {
        "Id": "BindTokens",
        "Title": {
          "default": "Bind Tokens"
        },
        "HelpText": {
          "default": "Bind the parameters above with a value or token. e.g. P. Name:param, P. Value:[token] "
        },
        "Type": "NameValueCollection",
        "Settings": {
          "NameColumn": "Parameter Name",
          "ValueColumn": "Parameter Value",
          "ButtonName": "Bind more data"
        }
      },
      {
        "Id": "OutputTokenName",
        "Title": {
          "default": "Store Result"
        },
        "HelpText": {
          "default": "Optionally, provide a token name that will store the result. For example, store IDs generated by inserts or select data that is needed by other actions. If the query returns more than one column, you can access them using [&lt;OutputTokenName&gt;:&lt;ColumnName&gt;] syntax. Date fields generate additional tokens - [&lt;OutputTokenName&gt;:&lt;ColumnName&gt;:ISO], [&lt;OutputTokenName&gt;:&lt;ColumnName&gt;:ISODate], [&lt;OutputTokenName&gt;:&lt;ColumnName&gt;:ISOAsUtc]."
        },
        "Type": "Text"
      },
      {
        "Id": "ExtractColumns",
        "Title": {
          "default": "Extract Columns"
        },
        "HelpText": {
          "default": "Optionally, provide an association table to map columns into tokens. For date columns additional tokens are generated - [&lt;Column&gt;:ISO], [&lt;Column&gt;:ISODate], [&lt;Column&gt;:ISOAsUtc]. Supports Tokens."
        },
        "Type": "NameValueCollection",
        "Settings": {
          "NameColumn": "Column Name",
          "ValueColumn": "Store As",
          "ButtonName": "Extract More Data"
        }
      },
      {
        "Id": "OnError",
        "Title": {
          "default": "On Error"
        },
        "HelpText": {
          "default": "Define a list of actions to run on error. Otherwise, an error message is returned which will contain the underlying error if debug mode is on. Tokens available in this context: [Exception], [ExceptionType], [ExceptionMessage], [ExceptionStack]"
        },
        "Type": "ActionList",
        "DefaultValue": {
          "default": "[]"
        },
        "Settings": {
          "Event": "OnError"
        }
      },
      {
        "Id": "ShowErrors",
        "Title": {
          "default": "Show Errors"
        },
        "HelpText": {
          "default": "Show errors raised from SQL. This is useful for example if the error is a nicely formatted error message.<br/>Note that if this option is turned on, admins will always get a full error message and regular users will get a generic error message."
        },
        "Type": "Boolean",
        "DefaultValue": {
          "default": "False"
        }
      }
    ],
    "Output": [
      {
        "Id": "OutputTokenName",
        "Title": {
          "default": "Store Result"
        },
        "HelpText": {
          "default": "Optionally, provide a token name that will store the result. For example, store IDs generated by inserts or select data that is needed by other actions. If the query returns more than one column, you can access them using [&lt;OutputTokenName&gt;:&lt;ColumnName&gt;] syntax. Date fields generate additional tokens - [&lt;OutputTokenName&gt;:&lt;ColumnName&gt;:ISO], [&lt;OutputTokenName&gt;:&lt;ColumnName&gt;:ISODate], [&lt;OutputTokenName&gt;:&lt;ColumnName&gt;:ISOAsUtc]."
        },
        "Type": "Text"
      },
      {
        "Id": "ExtractColumns",
        "Title": {
          "default": "Extract Columns"
        },
        "HelpText": {
          "default": "Optionally, provide an association table to map columns into tokens. For date columns additional tokens are generated - [&lt;Column&gt;:ISO], [&lt;Column&gt;:ISODate], [&lt;Column&gt;:ISOAsUtc]. Supports Tokens."
        },
        "Type": "NameValueCollection",
        "Settings": {
          "NameColumn": "Column Name",
          "ValueColumn": "Store As",
          "ButtonName": "Extract More Data",
          "OutputToken": "ValueColumn"
        }
      }
    ]
  }
]
